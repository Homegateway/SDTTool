{##### Define CDT version to use #####}
{% set CDTVersion = '3_7_0' %}


{##### Set some global variables to hold extended module classes #####}
{% set handledSubDevices = dict() %}


{##### Print Indention #####}
{% macro _indent(level) %}
{{''|indent(level*4, indentfirst=True)-}}
{% endmacro %}


{##### Print schema locations for actions #####}
{% macro renderActionSchemaLocations(module) %}
{% for action in module.actions %}
    <xs:include schemaLocation="{{getVersionedFilename(action.name, 'xsd', isAction=True, modelVersion=modelversion, namespacePrefix=namespaceprefix)}}" />
{% endfor %}
{% endmacro %}


{##### Print schema locations for module classes. Special handling for extended module classes #####}
{% macro renderModuleClassesSchemaLocations(device) %}
{% for module in device.modules %}
{% if module.name not in extendedModules %}
    <xs:include schemaLocation="{{getVersionedFilename(module.name, 'xsd', isModule=True, modelVersion=modelversion, namespacePrefix=namespaceprefix)}}" />
{% endif %}
{% endfor %}
{% endmacro %}


{##### Print schema locations for sub-devices #####}
{% macro renderSubDevicesSchemaLocations(device) %}
{% for subDevice in device.subDevices %}
{% if subDevice.extends %}
{% set name = subDevice.extends.clazz %}
{% else %}
{% set name = subDevice.id %}
{% endif %}
{% if name not in handledSubDevices %}
    <xs:include schemaLocation="{{getVersionedFilename(name, 'xsd', isSubDevice=True, modelVersion=modelversion, namespacePrefix=namespaceprefix)}}" />
{% endif %}
{% endfor %}
{% for name in handledSubDevices %}
    <xs:include schemaLocation="{{getVersionedFilename(name, 'xsd', isSubDevice=True, modelVersion=modelversion, namespacePrefix=namespaceprefix)}}" />
{% endfor %}

{% endmacro %}


{##### Print schema locations for module classes #####}
{% macro renderExtraDeviceElements(device) %}
{% for name in extendedModules %}
    <xs:element name="{{name}}" type="{{namespaceprefix}}:{{extendedModules[name]}}" />
    <xs:element name="{{name}}Annc" type="{{namespaceprefix}}:{{extendedModules[name]}}Annc" />
{% endfor %}
{% endmacro %}


{##### Print Array DataType #####}
{% macro _arrayType(type) %}
>
    <xs:simpleType>
        <xs:list itemType="{{ getSimpleDataType(type.type.arrayType.type.type) }}" />
    </xs:simpleType>
</xs:element>
{% endmacro %}


{##### Print General DataType #####}
{% macro getDataType(name, type, level) %}
{% if instanceType(type.type) == 'SDT3ArrayType' %}
{{ _arrayType(type) | indent(4*level, indentfirst=False) }}
{% else %}
{% if instanceType(type.type) == 'SDT3SimpleType' %}
 type="{{ getSimpleDataType(type.type.type) -}}" />
{% else %}
 type="{{ getSimpleDataType(type.type) -}}" />
{% endif %}
{% endif %}
{% endmacro %}


{##### Print SimpleDataTypes #####}
{% macro getSimpleDataType(type) -%}
{%- if type == 'boolean' %}
xs:boolean
{%- elif type == 'integer' %}
xs:integer
{%- elif type == 'float' %}
xs:float
{%- elif type == 'string' %}
xs:string
{%- elif type == 'datetime' %}
m2m:timestamp
{%- elif type == 'date' %}
m2m:timestamp
{%- elif type == 'time' %}
m2m:timestamp
{%- elif type =='uri' %}
xs:anyURI
{%- elif type == 'blob' %}
xs:base64Binary
{%- elif match('.+:.+', type) %}
{{- addToEnums(type) }}
{{- type }}
{%- else %}
unknown
{%- endif %}
{%- endmacro %}


{##### Print Properties and DataPoints #####}
{% macro renderSpecificAttributes(objs, annc, level) %}
{% for o in objs %}
{{_indent(level)}}<xs:element name="{{ sanitizeName(o.name, False) }}"
{%- if annc %} minOccurs="0"
{%- else %}
{%- if o.optional == 'true' %} minOccurs="0"
{%- endif -%}
{%- endif -%}
{{- getDataType(o.name, o.type, 5)}}
{%- endfor %}
{% endmacro %}



{##### Print action includes #####}
{% macro renderSpecificActions(actions) %}
{% for action in actions %}
{{_indent(7)}}<xs:element ref="{{ namespaceprefix }}:{{ action.name }}" />
{{- addToActions(action) }}
{% endfor %}
{% endmacro %}


{##### Print Module classes includes #####}
{% macro renderDeviceModuleClasses(moduleClasses, withAnnc) %}
{% for module in moduleClasses %}
{{_indent(8)}}<xs:element ref="{{ namespaceprefix }}:{{ sanitizeName(module.name, False, annc=withAnnc) }}" />
{% if withAnnc %}
{{_indent(8)}}<xs:element ref="{{ namespaceprefix }}:{{ sanitizeName(module.name, False, annc=withAnnc) }}Annc" />
{% endif %}
{% endfor %}
{% endmacro %}


{##### Print sub-devices includes #####}
{% macro renderDeviceSubDevices(subDevices, withAnnc) %}
{% for sd in subDevices %}
{{_indent(8)}}<xs:element ref="{{ namespaceprefix }}:{{ sanitizeName(sd.id, False, annc=withAnnc) }}" />
{% if withAnnc %}
{{_indent(8)}}<xs:element ref="{{ namespaceprefix }}:{{ sanitizeName(sd.id, False, annc=withAnnc) }}Annc" />
{% endif %}
{% endfor %}
{% endmacro %}


{##### Check whether one or module classes are inherited, perhaps with a different name #####}
{% macro checkInheritedModules(moduleClasses) -%}
{% for module in moduleClasses %}
{% if module.extends and module.name != module.extends.clazz %}
{{ extendedModules.__setitem__(module.name,  module.extends.clazz) or '' -}}
{{ extendedModulesExtends.__setitem__(module.extends.clazz, module.extends.clazz) or '' -}}
{% endif %}
{% endfor %}
{% endmacro %}


{##### Check whether one or subDevices are inherited, perhaps with a different name #####}
{% macro checkInheritedSubDevices(subDevices) -%}
{{ handledSubDevices.clear() or '' -}}
{% for subDevice in subDevices %}
{% if subDevice.extends and subDevice.id != subDevice.extends.clazz %}
{{ extendedSubDevices.__setitem__(subDevice.id,  subDevice.extends.clazz) or '' -}}
{{ extendedSubDevicesExtends.__setitem__(subDevice.extends.clazz, subDevice.extends.clazz) or '' -}}
{{ handledSubDevices.__setitem__(subDevice.extends.clazz, subDevice.extends.clazz) or '' -}}
{% endif %}
{% endfor %}
{% endmacro %}


{##### Print the ModuleClasses. This complexType needs to be named directly, because it may be referenced when inherited #####}
{% macro renderModuleClass(object) %}
<?xml version="1.0" encoding="UTF-8"?>
<!--
{{ license }}
-->

<xs:schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="{{ xsdtargetnamespace }}"
    xmlns:m2m="http://www.onem2m.org/xml/protocols" xmlns:{{namespaceprefix}}="http://www.onem2m.org/xml/protocols/{{ domaindefinition }}" elementFormDefault="unqualified" attributeFormDefault="unqualified"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:import namespace="http://www.onem2m.org/xml/protocols" schemaLocation="CDT-subscription-v{{CDTVersion}}.xsd" />
    <xs:import namespace="http://www.onem2m.org/xml/protocols" schemaLocation="CDT-commonTypes-v{{CDTVersion}}.xsd" />

    <xs:include schemaLocation="HD-enumerationTypes-v{{ modelversion.replace('.', '_')}}.xsd" />
    <xs:include schemaLocation="HD-commonTypes-v{{modelversion.replace('.', '_')}}.xsd" />

{{ renderActionSchemaLocations(object)}}

    <xs:element name="{{ object.name }}" type="{{ namespaceprefix }}:{{ object.name }}" substitutionGroup="m2m:sg_flexContainerResource" />
    <xs:complexType name="{{ object.name }}" >
        <xs:complexContent>
            <!-- Inherit Common Attributes from data type "flexContainerResource" -->
            <xs:extension base="m2m:flexContainerResource">
                <xs:sequence>

                    <!-- Resource Specific Attributes -->
{{ renderSpecificAttributes(object.properties, False, 6) }}
{{ renderSpecificAttributes(object.data, False, 6) }}

                    <!-- Child Resources -->

                    <xs:choice minOccurs="0" maxOccurs="1">
                        <xs:element name="childResource" type="m2m:childResourceRef" minOccurs="1" maxOccurs="unbounded" />
                        <xs:choice minOccurs="1" maxOccurs="unbounded">
{{ renderSpecificActions(object.actions) }}
                            <xs:element ref="m2m:subscription" />
                        </xs:choice>
                    </xs:choice>

                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:element name="{{ object.name }}Annc" type="{{ namespaceprefix }}:{{ object.name }}Annc" substitutionGroup="m2m:sg_announcedFlexContainerResource" />
    <xs:complexType name="{{ object.name }}Annc">
        <xs:complexContent>
            <!-- Inherit Common Attributes from data type "announcedFlexContainerResource" -->
            <xs:extension base="m2m:announcedFlexContainerResource">
                <xs:sequence>

                    <!-- Resource Specific Attributes -->
{{ renderSpecificAttributes(object.properties, True, 6) }}
{{ renderSpecificAttributes(object.data, True, 6) }}

                    <!-- Child Resources -->

                    <xs:choice minOccurs="0" maxOccurs="1">
                        <xs:element name="childResource" type="m2m:childResourceRef" minOccurs="1" maxOccurs="unbounded" />
                        <xs:choice minOccurs="1" maxOccurs="unbounded">
{{ renderSpecificActions(object.actions) }}
                            <xs:element ref="m2m:subscription" />
                        </xs:choice>
                    </xs:choice>

                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

</xs:schema>
{% endmacro %}



{% macro renderDevice(object) %}
{% if instanceType(object) == 'SDT3SubDevice' and object.extends %}
{% set name = object.extends.clazz %}
{% else %}
{% set name = object.id %}
{% endif %}
<?xml version="1.0" encoding="UTF-8"?>
<!--
{{ license }}
-->

<xs:schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="{{ xsdtargetnamespace }}"
    xmlns:m2m="http://www.onem2m.org/xml/protocols" xmlns:{{namespaceprefix}}="http://www.onem2m.org/xml/protocols/{{ domaindefinition }}" elementFormDefault="unqualified" attributeFormDefault="unqualified"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:import namespace="http://www.onem2m.org/xml/protocols" schemaLocation="CDT-subscription-v{{CDTVersion}}.xsd" />
    <xs:import namespace="http://www.onem2m.org/xml/protocols" schemaLocation="CDT-commonTypes-v{{CDTVersion}}.xsd" />

    <xs:include schemaLocation="HD-enumerationTypes-v{{modelversion.replace('.', '_')}}.xsd" />
    <xs:include schemaLocation="HD-commonTypes-v{{modelversion.replace('.', '_')}}.xsd" />

{{ checkInheritedModules(object.modules) -}}
{{ checkInheritedSubDevices(object.subDevices) -}}
{{ renderModuleClassesSchemaLocations(object) }}
{{ renderSubDevicesSchemaLocations(object) }}

    <xs:element name="{{ name }}" type="{{ namespaceprefix }}:{{ name }}" substitutionGroup="m2m:sg_flexContainerResource" />
    <xs:complexType name="{{ name }}">
        <xs:complexContent>
            <!-- Inherit Common Attributes from data type "flexContainerResource" -->
            <xs:extension base="m2m:flexContainerResource">
                <xs:sequence>
                
                    <!-- Resource Specific Attributes -->

                    <!-- Child Resources -->
                    
                    <xs:choice minOccurs="0" maxOccurs="1">
                        <xs:element name="childResource" type="m2m:childResourceRef" minOccurs="1" maxOccurs="unbounded" />
                        <xs:choice minOccurs="1" maxOccurs="unbounded">
{{ renderDeviceModuleClasses(object.modules, False)}}
{{ renderDeviceSubDevices(object.subDevices, False)}}
                            <xs:element ref="m2m:subscription"  />
                        </xs:choice>
                    </xs:choice>

                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:element name="{{ name }}Annc" type="{{ namespaceprefix }}:{{ name }}Annc" substitutionGroup="m2m:sg_announcedFlexContainerResource" />
    <xs:complexType name="{{ name }}Annc">
        <xs:complexContent>
            <!-- Inherit Common Attributes from data type "announcedFlexContainerResource" -->
            <xs:extension base="m2m:announcedFlexContainerResource">
                <xs:sequence>

                    <!-- Resource Specific Attributes -->

                    <!-- Child Resources -->

                    <xs:choice minOccurs="0" maxOccurs="1">
                        <xs:element name="childResource" type="m2m:childResourceRef" minOccurs="1" maxOccurs="unbounded" />
                        <xs:choice minOccurs="1" maxOccurs="unbounded">
{{ renderDeviceModuleClasses(object.modules, True) }}
{{ renderDeviceSubDevices(object.subDevices, True) }}
                            <xs:element ref="m2m:subscription"  />
                        </xs:choice>
                    </xs:choice>

                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

</xs:schema>
{% endmacro %}


{% macro renderAction(object) %}
<?xml version="1.0" encoding="UTF-8"?>
<!--
{{ license }}
-->

<xs:schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="{{ xsdtargetnamespace }}"
    xmlns:m2m="http://www.onem2m.org/xml/protocols" xmlns:{{namespaceprefix}}="http://www.onem2m.org/xml/protocols/{{ domaindefinition }}" elementFormDefault="unqualified" attributeFormDefault="unqualified"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:import namespace="http://www.onem2m.org/xml/protocols" schemaLocation="CDT-subscription-v{{CDTVersion}}.xsd" />
    <xs:import namespace="http://www.onem2m.org/xml/protocols" schemaLocation="CDT-commonTypes-v{{CDTVersion}}.xsd" />

    <xs:include schemaLocation="HD-enumerationTypes-v{{modelversion.replace('.', '_')}}.xsd" />
    <xs:include schemaLocation="HD-commonTypes-v{{modelversion.replace('.', '_')}}.xsd" />

{{ renderModuleClassesSchemaLocations(object)}}

    <xs:element name="{{ object.name }}" type="{{ namespaceprefix }}:{{ object.name }}" substitutionGroup="m2m:sg_flexContainerResource" />
    <xs:complexType name="{{ object.name }}">
        <xs:complexContent>
            <!-- Inherit Common Attributes from data type "flexContainerResource" -->
            <xs:extension base="m2m:flexContainerResource">
                <xs:sequence>

                    <!-- Resource Specific Attributes -->
                
                    <!-- Child Resources -->

                    <xs:choice minOccurs="0" maxOccurs="1">
                        <xs:element name="childResource" type="m2m:childResourceRef" maxOccurs="unbounded" />
                        <xs:choice minOccurs="1" maxOccurs="unbounded">
                            <xs:element ref="m2m:subscription" />
                        </xs:choice>
                    </xs:choice>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:element name="{{ object.name }}Annc" type="{{ namespaceprefix }}:{{ object.name }}Annc" substitutionGroup="m2m:sg_announcedFlexContainerResource" />
    <xs:complexType name="{{ object.name }}Annc">
        <xs:complexContent>
            <!-- Inherit Common Attributes from data type "announcedFlexContainerResource" -->
            <xs:extension base="m2m:announcedFlexContainerResource">
                <xs:sequence>

                    <!-- Resource Specific Attributes -->
                                    
                    <!-- Child Resources -->

                    <xs:choice minOccurs="0" maxOccurs="1">
                        <xs:element name="childResource" type="m2m:childResourceRef" maxOccurs="unbounded" />
                        <xs:choice minOccurs="1" maxOccurs="unbounded">
                            <xs:element ref="m2m:subscription" />
                        </xs:choice>
                    </xs:choice>    
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

</xs:schema>
{% endmacro %}


{% macro renderEnum(object) %}
    <xs:simpleType name="{{ object.name }}">
        <xs:annotation>
            <xs:documentation>???</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:integer">
            <!-- name -->
            <xs:enumeration value="1" />
        </xs:restriction>
    </xs:simpleType>

{% endmacro %}

{% macro renderCommons(object) %}
<?xml version="1.0" encoding="UTF-8"?>
<!--
{{ license }}
-->

<xs:schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="{{ xsdtargetnamespace }}"
    xmlns:m2m="http://www.onem2m.org/xml/protocols" xmlns:{{namespaceprefix}}="http://www.onem2m.org/xml/protocols/{{ domaindefinition }}" elementFormDefault="unqualified" attributeFormDefault="unqualified"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

{% for name in object.extendedSubDevicesExtends %}
    <xs:include schemaLocation="{{getVersionedFilename(name, 'xsd', modelVersion=modelversion, namespacePrefix=namespaceprefix)}}" />
{% endfor %}

{% for name in object.extendedModulesExtends %}
    <xs:include schemaLocation="{{getVersionedFilename(name, 'xsd', isModule=True, modelVersion=modelversion, namespacePrefix=namespaceprefix)}}" />
{% endfor %}

{% for name in object.extendedSubDevices %}
    <xs:element name="{{name}}" type="{{namespaceprefix}}:{{object.extendedSubDevices[name]}}" />
    <xs:element name="{{name}}Annc" type="{{namespaceprefix}}:{{object.extendedSubDevices[name]}}Annc" />
{% endfor %}

{% for name in object.extendedModules %}
    <xs:element name="{{name}}" type="{{namespaceprefix}}:{{object.extendedModules[name]}}" />
    <xs:element name="{{name}}Annc" type="{{namespaceprefix}}:{{object.extendedModules[name]}}Annc" />
{% endfor %}


</xs:schema>
{% endmacro %}
